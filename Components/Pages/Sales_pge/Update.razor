@page "/Sales/Update/{Id:int}"
@using RenzGrandWeddingblazor.ph.ViewModels
@using Newtonsoft.Json
@using codegeneratorlib.Helpers
@using RenzGrandWeddingblazor.ph.Data.Entities 
 @using RenzGrandWeddingblazor.ph.Data.Repositories 
 @inject IRepositoryWrapper repowrapper
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;

<PageTitle>Update Page</PageTitle>

<div class="">
    <div class="page-title">
        <div class="title_left">
            <h5>Sale/Update</h5>
        </div>
		<hr />
    </div>
    <div class="clearfix"></div>
    <div class="row">
        <div class="col-md-12 col-sm-12 col-xs-12" style="margin-top:30px;">
            <div class="x_panel">               
                <div class="x_content Sales-container">		
				
                    <div class="row">
						<div class="modal-header">
							<h5><b>Update Sale Details</b></h5>
						</div>

                        <EditForm class="form-horizontal form-label-left" id="Sales-form" Model="oSalesVM" OnValidSubmit="()=>SendRequest()">                           
							<div class="modal-body">
								<DataAnnotationsValidator />
								<ValidationSummary />   
								@if (!string.IsNullOrEmpty(responseMessage))
								{
							      <div class="alert alert-success" role="alert">
							      	@responseMessage
							      </div>
								}
								<input type="hidden" @bind="oSalesVM.SalesId" id=js-salesid/>
								
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Sales Name</label>	
								<input @bind="oSalesVM.SalesName" id="js-salesname" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Sales Description</label>	
								<textarea @bind="oSalesVM.SalesDescription" id="js-salesdescription" class="form-control"></textarea>
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Sales Date</label>	
								<input type="date" @bind="oSalesVM.SalesDate" id="js-salesdate" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Business Value</label>	
								<input @bind="oSalesVM.BusinessValue" id="js-businessvalue" class="form-control" />
								
							</div>
							</div>	
							 <div class="modal-footer">
								  <div class="col-md-12 col-sm-12 col-xs-12 form-group">
								  
									<a href="/Sales/Index" class="btn btn-danger btn-custom float-md-end" style="margin-left:10px;">
									<i class="fa fa-close"></i> Cancel Request</a>

							  		@if (Loading)
                                    {
										<button class="btn btn-primary btn-custom float-md-end" type="button" disabled>
                                            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                                            <span role="status">Loading...</span>
                                        </button>
                                    }
                                    else
									{
										<button class="btn btn-primary btn-custom float-md-end" type="submit">
											<i class="fa fa-save"></i> Submit Request
                                        </button>
                                    }
								 </div>	
							 </div>
                        </EditForm> 
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code {

	[Parameter]
	public int Id { get; set; }
	private SalesVM oSalesVM = new();
	private string responseMessage;
	private bool Loading = false;

	//file upload
	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		IBrowserFile file = e.File;
		var buffer = new byte[file.Size];
		await file.OpenReadStream().ReadAsync(buffer);
		var bytes = $"{file.Name},{Convert.ToBase64String(buffer)}";
		
	}

	protected override async Task OnInitializedAsync()
	{

		var restService = new RestService<SalesVM>();
		var result = new ServiceModel<SalesVM>();
		result = await restService.Get($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/Sales/GetById/{Id}");
		if (!result.IsSuccess)
		{
			NavigationManager.NavigateTo("/Sales/Index");
		}
		else
		{
			oSalesVM = result.Data;
		}
	}

	private async Task SendRequest()
	{
		Loading = true;
		var restService = new RestService<List<SalesVM>>();

		var json = JsonConvert.SerializeObject(oSalesVM);

		var result = new ServiceModel<List<SalesVM>>();

		result = await restService.Post($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/Sales/update", json);

		if (!result.IsSuccess)
		{
			responseMessage = result.Error;
		}
		else
		{
			
			NavigationManager.NavigateTo($"/Sales/Details/{Id}");
		}
		
		Loading = false;

		StateHasChanged();
	}
}
