@using RenzGrandWeddingblazor.ph.ViewModels
@using codegeneratorlib.Helpers
@using Newtonsoft.Json
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;

<!-- Modal.razor -->
<div class="modal-backdrop" style="@(_isVisible ? "display: block;" : "display: none;")">
    <div class="modal-container">
        <div class="modal-header">
            <h5>@ModalTitle</h5>
            <button class="close" @onclick="Hide">Ã—</button>
        </div>

        <EditForm class="form-horizontal form-label-left" id="Pullout-form" Model="oTitleVM" OnValidSubmit="()=>SendRequest()">
            <div class="modal-body">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (!string.IsNullOrEmpty(responseMessage))
                {
                    <div class="alert alert-success" role="alert">
                        @responseMessage
                    </div>
                }
                <input type="hidden" @bind="oTitleVM.TitleId" id=js-titleid/>
				
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Title Name</label>	
								<input @bind="oTitleVM.TitleName" id="js-titlename" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>T Itle Description</label>	
								<input @bind="oTitleVM.TItleDescription" id="js-titledescription" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Product Line Name</label>	
								<select @bind="oTitleVM.ProductLineId" id="js-productlineid" class="form-control"><option value="">-- Select --</option>@if (listProductLine != null){@foreach (var item in listProductLine){<option value="@item.ProductLineId">@item.ProductLineName</option>}}
							</select>
								
							</div>
            </div>
            <div class="modal-footer">
                <div class="col-md-12 col-sm-12 col-xs-12 form-group">
                    <a href="/Title/Index" @onclick="Hide" class="btn btn-danger btn-custom float-md-end" style="margin-left:10px;">
					<i class="fa fa-close"></i> Cancel Request</a>
                    @if (Loading)
                    {
                        <button class="btn btn-primary btn-custom float-md-end" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                            <span role="status">Loading...</span>
                        </button>
                    }
                    else
                    {
                       <button class="btn btn-primary btn-custom float-md-end" type="submit">
							<i class="fa fa-save"></i> Submit Request
                       </button>
                    }
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
	public int Id { get; set; }
	private TitleVM oTitleVM = new();
	private string responseMessage = "";
	private bool Loading = false;

    private bool _isVisible;

    [Parameter] public string ModalTitle { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }

    private List<ProductLineVM> listProductLine = new();

    //file upload
	private async Task LoadFiles(InputFileChangeEventArgs e)
	{
		IBrowserFile file = e.File;
		var buffer = new byte[file.Size];
		await file.OpenReadStream().ReadAsync(buffer);
		var bytes = $"{file.Name},{Convert.ToBase64String(buffer)}";
		
	}

    public async Task Show(int id)
    {
        responseMessage = "";
        _isVisible = true;

        //#populatePropertyDropdown
  // listProductLine = new List<ProductLineVM>()
  // {
  //     new ProductLineVM
  //     {
  //         ProductLineId = 2,
  //         ProductLineName = "Code Generator Fram"
  //     },
  //     new ProductLineVM
  //     {
  //         ProductLineId = 3,
  //         ProductLineName = "Tektite"
  //     }
  // };

        if (id == 0)
        {
            oTitleVM = new();
        }
        else
        {
            var restService = new RestService<TitleVM>();
            var result = new ServiceModel<TitleVM>();
            result = await restService.Get($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/Titles/GetById/{id}");
            if (!result.IsSuccess)
            {
                responseMessage = "Error while fetching data, Contact the administrator";
            }
            else
            {
                oTitleVM = result.Data;
            }
        }
    }

    public void Hide()
    {
        _isVisible = false;
    }

    private async Task SendRequest()
	{
		Loading = true;
		var restService = new RestService<List<TitleVM>>();

		var json = JsonConvert.SerializeObject(oTitleVM);

		var result = new ServiceModel<List<TitleVM>>();

		if (oTitleVM.TitleId != 0)
        {

            result = await restService.Post($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/Titles/Update", json);
        }
        else
        {

            result = await restService.Post($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/Titles/Add", json);
        }

		if (!result.IsSuccess)
		{
			responseMessage = result.Error;
		}
		else
		{
			responseMessage = "Request has been successfully submitted!";
            oTitleVM = new();
		}
        
		Loading = false;
		StateHasChanged();
	}

}
