@using RenzGrandWeddingblazor.ph.Middleware
@using RenzGrandWeddingblazor.ph.ViewModels
@using codegeneratorlib.Helpers
@using Newtonsoft.Json
@rendermode InteractiveServer
@inject NavigationManager NavigationManager;

<!-- Modal.razor -->
<div class="modal-backdrop" style="@(_isVisible ? "display: block;" : "display: none;")">
    <div class="modal-container">
        <div class="modal-header">
            <h5>@Title</h5>
            <button class="close" @onclick="Hide">Ã—</button>
        </div>
       
        <EditForm class="form-horizontal form-label-left" id="Pullout-form" Model="oPulloutVM" OnValidSubmit="()=>SendRequest()">
            <div class="modal-body">
                <DataAnnotationsValidator />
                <ValidationSummary />
                @if (AlertShowMessage)
                {
                    <div class="alert alert-success" role="alert">
                        @responseMessage
                    </div>
                }
                <input type="hidden" @bind="oPulloutVM.PulloutId" id=js-pulloutid/>
				
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Pullout Name</label>	
								<input @bind="oPulloutVM.PulloutName" id="js-pulloutname" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Pullout Description</label>	
								<textarea @bind="oPulloutVM.PulloutDescription" id="js-pulloutdescription" class="form-control"></textarea>
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Pullout Date</label>	
								<input type="date" @bind="oPulloutVM.PulloutDate" id="js-pulloutdate" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Receipt Image</label>	
								<InputFile OnChange="LoadFiles" id="js-file" class="form-control" multiple required/>
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Business Value</label>	
								<input @bind="oPulloutVM.BusinessValue" id="js-businessvalue" class="form-control" />
								
							</div>
							<div class="col-md-12 col-sm-12 col-xs-12 form-group">
								<label>Pullout Price</label>	
								<input @bind="oPulloutVM.PulloutPrice" id="js-pulloutprice" class="form-control" />
							</div>
                </div>
            <div class="modal-footer">
                <div class="col-md-12 col-sm-12 col-xs-12 form-group">
                    <a href="/Pullout/Index" @onclick="Hide" class="btn btn-danger btn-custom float-md-end" style="margin-left:10px;">
					<i class="fa fa-close"></i> Cancel Request</a>
                    @if (Loading)
                    {
                        <button class="btn btn-primary btn-custom float-md-end" type="button" disabled>
                            <span class="spinner-border spinner-border-sm" aria-hidden="true"></span>
                            <span role="status">Loading...</span>
                        </button>
                    }
                    else
                    {
                       <button class="btn btn-primary btn-custom float-md-end" type="submit">
							<i class="fa fa-save"></i> Submit Request
                       </button>
                    }
                </div>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }
    private PulloutVM oPulloutVM = new();
    private string responseMessage = "";
    private bool Loading = false;

    private bool _isVisible;

    [Parameter] public string Title { get; set; }
    [Parameter] public RenderFragment ChildContent { get; set; }
    private bool AlertShowMessage = false;
    //file upload
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;
        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);
        var bytes = $"{file.Name},{Convert.ToBase64String(buffer)}";
        oPulloutVM.ReceiptImage = bytes;
    }

    public async Task Show(int id)
    {
        responseMessage = "";
        _isVisible = true;

        if (id == 0)
        {
            oPulloutVM = new();
        }
        else
        {
            var restService = new RestService<PulloutVM>();
            var result = new ServiceModel<PulloutVM>();
            result = await restService.Get($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/Pullouts/GetById/{id}");
            if (!result.IsSuccess)
            {
                responseMessage = "Error while fetching data, Contact the administrator";
            }
            else
            {
                oPulloutVM = result.Data;
            }
        }
    }

    public void Hide()
    {
        _isVisible = false;
    }

    private async Task SendRequest()
    {
        Loading = true;
        var restService = new RestService<List<PulloutVM>>();

        var json = JsonConvert.SerializeObject(oPulloutVM);

        var result = new ServiceModel<List<PulloutVM>>();

        if (oPulloutVM.PulloutId != 0)
        {

            result = await restService.Post($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/Pullouts/Update", json);
            if (!result.IsSuccess)
            {
                responseMessage = result.Error;
            }
            else
            {
                Loading = false;

                AlertShowMessage = true;
                responseMessage = "Request has been successfully submitted!";

                await InvokeAsync(() => StateHasChanged());

                await Task.Delay(5000);

                AlertShowMessage = false;
            }
        }
        else
        {

            result = await restService.Post($"{AppHelper.CDNFTPConfiguration.PublicHost}/api/Pullouts/Add", json);
            if (!result.IsSuccess)
            {
                responseMessage = result.Error;
            }
            else
            {
                Loading = false;
                oPulloutVM = new();

                AlertShowMessage = true;
                responseMessage = "Request has been successfully submitted!";

                await InvokeAsync(() => StateHasChanged());

                await Task.Delay(5000);

                AlertShowMessage = false;
            }
        }

        if (!result.IsSuccess)
        {
            responseMessage = result.Error;
        }
        else
        {
            responseMessage = "Request has been successfully submitted!";
            oPulloutVM = new();
        }
        
		Loading = false;
		StateHasChanged();
	}

}
